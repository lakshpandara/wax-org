// DO NOT EDIT THIS FILE, it's autogenerated
//
// MIT License
// 
// Copyright (c) 2019 worldwide-asset-exchange
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#pragma once

#include <cstdint> 
#include <string>
#include <vector>

#include <eosio/testing/tester.hpp>

namespace contract_helpers {
    using namespace eosio::testing;
    
    using std::string;
    using byte_vec = std::vector<std::uint8_t>;
    using char_vec = std::vector<char>;
    
    template<typename T>
    using reader_t = T(*)(const char*);
    
    template<typename T>
    T get_data(const string& file, const string& path, reader_t<T> reader) {
        auto fullpath{ path + file };
        return reader(fullpath.c_str());
    }
    
    // Current contract helpers
    inline string   get_wast() { return get_data("wax.${CONTRACT_NAME}.wast", "${CONTRACT_DIR}/", read_wast); }
    inline byte_vec get_wasm() { return get_data("wax.${CONTRACT_NAME}.wasm", "${CONTRACT_DIR}/", read_wasm); }
    inline char_vec get_abi()  { return get_data("wax.${CONTRACT_NAME}.abi",  "${CONTRACT_DIR}/", read_abi);  }
    
    // 'Other' contract helpers
    inline string   get_wast(const string& file) { return get_data(file, "${CONTRACT_DIR}/", read_wast); }
    inline byte_vec get_wasm(const string& file) { return get_data(file, "${CONTRACT_DIR}/", read_wasm); }
    inline char_vec get_abi( const string& file) { return get_data(file, "${CONTRACT_DIR}/", read_abi);  }
  
} // namespace contract_helpers
